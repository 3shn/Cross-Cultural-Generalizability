choices_t1 <- list()
choices_t2 <- list()
Preference <- c()
for (id in 1:20) {
choices_t1[[id]] <- sample(1:3, 20, replace = TRUE)
choices_t2[[id]] <- sample(1:3, 20, replace = TRUE)
Preference[id] <- as.numeric(names(sort(table(choices_t1[[id]]), decreasing = TRUE))[1])
}
pre <- c()
post <- c()
for (id in 1:20) {
pre[id] <- length(which(choices_t1[[id]] == Preference[id]))
post[id] <- length(which(choices_t2[[id]] == Preference[id]))
}
pre <- pre/20
post <- post/20
boxplot(pre, post, ylim = c(0,1), labels=c("t1", "t2"))
#Create population array [pop, sex, age]
D_popdiff <- array(NA,c(2,2,length(Age_range)))
# Example 1: Demographic Standardization
# The aim here is to simulate and analyze exemplary data sets generated from different processes
# a) Disparities arise only from real demographic differences among populations (e.g. one is older)
# b) Disparities arise only from differences in sampling procedure (e.g. gender of researcher influences gender of volunteer participants)
#Load packages
library(rethinking)
library(scales)
library(sn)
library(plotrix)
N <- 500   # Sample size
Age_range <- c(1:90) #Age range of participants
####
###
##
# a) Real differences
##
###
####
#Create population array [pop, sex, age]
D_popdiff <- array(NA,c(2,2,length(Age_range)))
seq(0, 100, 1)
# Example 1: Demographic Standardization
# The aim here is to simulate and analyze exemplary data sets generated from different processes
# a) Disparities arise only from real demographic differences among populations (e.g. one is older)
# b) Disparities arise only from differences in sampling procedure (e.g. gender of researcher influences gender of volunteer participants)
#Load packages
library(rethinking)
library(scales)
library(sn)
library(plotrix)
N <- 500   # Sample size
Age_range <- c(1:90) #Age range of participants
####
###
##
# a) Real differences
##
###
####
#Create population array [pop, sex, age]
D_popdiff <- array(NA,c(2,2,length(Age_range)))
seq(0, 100, 1) <- seq(0, 100, 1)
#Exponential distribution (similar to many growing populations)
D_popdiff[1,1, ] <- dexp(seq(0, 100, 1), 0.04)[Age_range]
D_popdiff[1,2, ] <- dexp(seq(0, 100, 1), 0.04)[Age_range]
#Skewed normal distribution (similar to many shrinking populations)
D_popdiff[2,1, ] <- dsn(1:100, xi = 30, omega = 50, alpha = 1)[Age_range]
D_popdiff[2,2, ] <- dsn(1:100, xi = 30, omega = 50, alpha = 1)[Age_range]
# Example 1: Demographic Standardization
# The aim here is to simulate and analyze exemplary data sets generated from different processes
# a) Disparities arise only from real demographic differences among populations (e.g. one is older)
# b) Disparities arise only from differences in sampling procedure (e.g. gender of researcher influences gender of volunteer participants)
#Load packages
library(rethinking)
library(scales)
library(sn)
library(plotrix)
N <- 500   # Sample size
Age_range <- c(1:90) #Age range of participants
####
###
##
# a) Real differences
##
###
####
#Create population array [pop, sex, age]
D_popdiff <- array(NA,c(2,2,length(Age_range)))
#Exponential distribution (similar to many growing populations)
D_popdiff[1,1, ] <- dexp(seq(0, 100, 1), 0.04)[Age_range]
D_popdiff[1,2, ] <- dexp(seq(0, 100, 1), 0.04)[Age_range]
#Skewed normal distribution (similar to many shrinking populations)
D_popdiff[2,1, ] <- dsn(1:100, xi = 30, omega = 50, alpha = 1)[Age_range]
D_popdiff[2,2, ] <- dsn(1:100, xi = 30, omega = 50, alpha = 1)[Age_range]
d <- data.frame(id = 1:(2*N), soc_id = c(rep(1,N), rep(2,N)), age = NA, gender = NA, outcome = NA)
#Simulate ages from above distributions
for (pop_id in 1:2) {
d$age[d$soc_id==pop_id] <- sample(Age_range, N, replace = TRUE, prob = D_popdiff[pop_id,1,])
}
# Example 1: Demographic Standardization
# The aim here is to simulate and analyze exemplary data sets generated from different processes
# a) Disparities arise only from real demographic differences among populations (e.g. one is older)
# b) Disparities arise only from differences in sampling procedure (e.g. gender of researcher influences gender of volunteer participants)
#Load packages
library(rethinking)
library(scales)
library(sn)
library(plotrix)
N <- 500   # Sample size
Age_range <- c(1:90) #Age range of participants
####
###
##
# a) Real differences
##
###
####
#Create population array [pop, sex, age]
D_popdiff <- array(NA,c(2,2,length(Age_range)))
#Exponential distribution (similar to many growing populations)
D_popdiff[1,1, ] <- dexp(seq(0, 100, 1), 0.04)[Age_range]
D_popdiff[1,2, ] <- dexp(seq(0, 100, 1), 0.04)[Age_range]
#Skewed normal distribution (similar to many shrinking populations)
D_popdiff[2,1, ] <- dsn(1:100, xi = 30, omega = 50, alpha = 1)[Age_range]
D_popdiff[2,2, ] <- dsn(1:100, xi = 30, omega = 50, alpha = 1)[Age_range]
#Generate data
#Construct dataframe
d <- data.frame(id = 1:(2*N), soc_id = c(rep(1,N), rep(2,N)), age = NA, gender = NA, outcome = NA)
#Simulate ages from above distributions
for (pop_id in 1:2) {
d$age[d$soc_id==pop_id] <- sample(Age_range, N, replace = TRUE, prob = D_popdiff[pop_id,1,])
}
#Simulate Genders
p_male <- 0.5
d$gender[d$soc_id==1] <- sample(c(1,2),N, replace = TRUE, prob = c(p_male, 1-p_male))
d$gender[d$soc_id==2] <- sample(c(1,2),N, replace = TRUE, prob = c(p_male, 1-p_male))
SampleD_popdiff <- array(NA,c(2,2,length(Age_range)))
for (pop_id in 1:2) {
for (gender in 1:2) {
for (i in Age_range) {
SampleD_popdiff[pop_id, gender, i] <- length(which(d$age[d$soc_id == pop_id]==i & d$gender[d$soc_id == pop_id] == gender))
}
}
}
#Generate observations
stand_age<- c()
for (i in 1:(2*N)) stand_age[i] <- (d$age[i] - mean(d$age[d$soc_id==1]))/sd(d$age[d$soc_id==1])
for(i in 1:(2*N)) d$outcome[i] <- rbinom(1, 1, inv_logit(p_logit_culture[d$soc_id[i]] + b_age*d$age[i] + b_gender*(d$gender[i]-1)) )
#Simulate Genders
p_male <- 0.5
d$gender[d$soc_id==1] <- sample(c(1,2),N, replace = TRUE, prob = c(p_male, 1-p_male))
d$gender[d$soc_id==2] <- sample(c(1,2),N, replace = TRUE, prob = c(p_male, 1-p_male))
#Create demographic statistics of samples
SampleD_popdiff <- array(NA,c(2,2,length(Age_range)))
for (pop_id in 1:2) {
for (gender in 1:2) {
for (i in Age_range) {
SampleD_popdiff[pop_id, gender, i] <- length(which(d$age[d$soc_id == pop_id]==i & d$gender[d$soc_id == pop_id] == gender))
}
}
}
# Create "Real" cultural differences: (Demography-independent) Probabilities in both populations on logit scale
p_logit_culture <-c(-3, -1.5)
#Effects of age and gender on prosociality
b_age <- 0.04
b_gender <- 2
#Generate observations
stand_age<- c()
for (i in 1:(2*N)) stand_age[i] <- (d$age[i] - mean(d$age[d$soc_id==1]))/sd(d$age[d$soc_id==1])
for(i in 1:(2*N)) d$outcome[i] <- rbinom(1, 1, inv_logit(p_logit_culture[d$soc_id[i]] + b_age*d$age[i] + b_gender*(d$gender[i]-1)) )
stand_age
phi_popdiff <- c()
for (pop in 1:2) {
expect_pos = 0
total = 0
for (a in 1:2){
for (b in 1:max(Age_range)){
total = total + D_popdiff[pop,a,b];
expect_pos = expect_pos + D_popdiff[pop,a,b] * inv_logit(p_logit_culture[pop] + b_gender*(a-1) + b_age*b);
}
}
phi_popdiff[pop] = expect_pos / total
}
phi_popdiff
D_popdiff[pop,a,b]
D_popdiff[pop,a,b]
#Create lists for Stan
#Population 1
d1_popdiff <- list(N = N,
MA = max(Age_range),
gender = d$gender[d$soc_id==1],
age = d$age[d$soc_id==1],
outcome = d$outcome[d$soc_id==1],
P_same = SampleD_popdiff[1,,],
P_other = SampleD_popdiff[2,,]
)
#Population 2
d2_popdiff <- list(N = N,
MA = max(Age_range),
gender = d$gender[d$soc_id==2],
age = d$age[d$soc_id==2],
outcome = d$outcome[d$soc_id==2],
P_same = SampleD_popdiff[2,,],
P_other = SampleD_popdiff[1,,]
)
# Example 1: Demographic Standardization
# The aim here is to simulate and analyze exemplary data sets generated from different processes
# a) Disparities arise only from real demographic differences among populations (e.g. one is older)
# b) Disparities arise only from differences in sampling procedure (e.g. gender of researcher influences gender of volunteer participants)
#Load packages
library(rethinking)
library(scales)
library(sn)
library(plotrix)
N <- 500   # Sample size
Age_range <- c(1:90) #Age range of participants
####
###
##
# a) Real differences
##
###
####
#Create population array [pop, sex, age]
D_popdiff <- array(NA,c(2,2,length(Age_range)))
#Exponential distribution (similar to many growing populations)
D_popdiff[1,1, ] <- dexp(seq(0, 100, 1), 0.04)[Age_range]
D_popdiff[1,2, ] <- dexp(seq(0, 100, 1), 0.04)[Age_range]
#Skewed normal distribution (similar to many shrinking populations)
D_popdiff[2,1, ] <- dsn(1:100, xi = 30, omega = 50, alpha = 1)[Age_range]
D_popdiff[2,2, ] <- dsn(1:100, xi = 30, omega = 50, alpha = 1)[Age_range]
#Generate data
#Construct dataframe
d <- data.frame(id = 1:(2*N), soc_id = c(rep(1,N), rep(2,N)), age = NA, gender = NA, outcome = NA)
#Simulate ages from above distributions
for (pop_id in 1:2) {
d$age[d$soc_id==pop_id] <- sample(Age_range, N, replace = TRUE, prob = D_popdiff[pop_id,1,])
}
#Simulate Genders
p_male <- 0.5
d$gender[d$soc_id==1] <- sample(c(1,2),N, replace = TRUE, prob = c(p_male, 1-p_male))
d$gender[d$soc_id==2] <- sample(c(1,2),N, replace = TRUE, prob = c(p_male, 1-p_male))
#Create demographic statistics of samples
SampleD_popdiff <- array(NA,c(2,2,length(Age_range)))
for (pop_id in 1:2) {
for (gender in 1:2) {
for (i in Age_range) {
SampleD_popdiff[pop_id, gender, i] <- length(which(d$age[d$soc_id == pop_id]==i & d$gender[d$soc_id == pop_id] == gender))
}
}
}
# Create "Real" cultural differences: (Demography-independent) Probabilities in both populations on logit scale
p_logit_culture <-c(-3, -1.5)
#Effects of age and gender on prosociality
b_age <- 0.04
b_gender <- 2
#Generate observations
stand_age<- c()
for (i in 1:(2*N)) stand_age[i] <- (d$age[i] - mean(d$age[d$soc_id==1]))/sd(d$age[d$soc_id==1])
for(i in 1:(2*N)) d$outcome[i] <- rbinom(1, 1, inv_logit(p_logit_culture[d$soc_id[i]] + b_age*d$age[i] + b_gender*(d$gender[i]-1)) )
#Calculate True population value
phi_popdiff <- c()
for (pop in 1:2) {
expect_pos = 0
total = 0
for (a in 1:2){ # loop over genders
for (b in 1:max(Age_range)){ #loop over ages
total = total + D_popdiff[pop,a,b];
expect_pos = expect_pos + D_popdiff[pop,a,b] * inv_logit(p_logit_culture[pop] + b_gender*(a-1) + b_age*b);
}
}
phi_popdiff[pop] = expect_pos / total
}
#Create lists for Stan
#Population 1
d1_popdiff <- list(N = N,
MA = max(Age_range),
gender = d$gender[d$soc_id==1],
age = d$age[d$soc_id==1],
outcome = d$outcome[d$soc_id==1],
P_same = SampleD_popdiff[1,,],
P_other = SampleD_popdiff[2,,]
)
#Population 2
d2_popdiff <- list(N = N,
MA = max(Age_range),
gender = d$gender[d$soc_id==2],
age = d$age[d$soc_id==2],
outcome = d$outcome[d$soc_id==2],
P_same = SampleD_popdiff[2,,],
P_other = SampleD_popdiff[1,,]
)
MRP_GP <- "
functions{
matrix GPL(int K, real C, real D, real S){
matrix[K,K] Rho;
real KR;
KR = K;
for(i in 1:(K-1)){
for(j in (i+1):K){
Rho[i,j] = C * exp(-D * ( (j-i)^2 / KR^2) );
Rho[j,i] = Rho[i,j];
}}
for (i in 1:K){
Rho[i,i] = 1;
}
return S*cholesky_decompose(Rho);
}
}
data {
int N;
int MA;
int age[N];
int outcome[N];
int gender[N];
int<lower = 0> P_same[2,MA];   // Here we enter data matrix with demographic constitution of target population
int<lower = 0> P_other[2,MA];   // Here we enter data matrix with demographic constitution of target population
}
parameters {
vector[2] alpha;
matrix[2,MA] age_effect;    //Matrix for GP age effects
real<lower=0> eta[2];
real<lower=0> sigma[2];
real<lower=0, upper=1> rho[2];
}
model {
vector[N] p;
alpha ~ normal(0, 2);
eta ~ exponential(2);
sigma ~ exponential(1);
rho ~ beta(10, 1);
for ( i in 1:2){
age_effect[i,] ~ multi_normal_cholesky( rep_vector(0, MA) , GPL(MA, rho[i], eta[i], sigma[i]) );
}
for ( i in 1:N ) {
p[i] = alpha[gender[i]] + age_effect[gender[i],age[i]];
}
outcome ~ binomial_logit(1, p);
}
generated quantities{
real expect_pos = 0;
real<lower = 0, upper = 1> phi;  // This is value for p in the source population
real<lower = 0, upper = 1> psi;  // This is value for p in the target population
int total = 0;
vector[MA] pred_p_m;
vector[MA] pred_p_f;
for (a in 1:2)
for (b in 1:MA){
total += P_same[a,b];
expect_pos += P_same[a,b] * inv_logit(alpha[a] + age_effect[a,b]);
}
phi = expect_pos / total;
total = 0;
expect_pos = 0;
for (a in 1:2)
for (b in 1:MA){
total += P_other[a,b];
expect_pos += P_other[a,b] * inv_logit(alpha[a] + age_effect[a,b]);
}
psi = expect_pos / total;
pred_p_m = inv_logit(alpha[1] + age_effect[1,]');
pred_p_f = inv_logit(alpha[2] + age_effect[2,]');
}
"
m_popdiff1 <- stan( model_code  = MRP_GP , data=d1_popdiff ,iter = 4000, cores = 4, seed=1, chains=4, control = list(adapt_delta=0.95, max_treedepth = 13))
m_popdiff2 <- stan( model_code  = MRP_GP , data=d2_popdiff ,iter = 4000, cores = 4, seed=1, chains=4, control = list(adapt_delta=0.95, max_treedepth = 13))
s_popdiff1 <- extract.samples(m_popdiff1)
s_popdiff2 <- extract.samples(m_popdiff2)
####
###
##
# b) Differences in sampling of ages/genders
##
###
####
#Create population array [pop, sex, age]
D_samplediff <- array(NA,c(2,2,length(Age_range)))
#Exponential distribution (similar to many growing populations)
D_samplediff[1,1, ] <- dexp(seq(0, 100, 1), 0.04)[Age_range]
D_samplediff[1,2, ] <- dexp(seq(0, 100, 1), 0.04)[Age_range]
#Skewed normal distribution (similar to many shrinking populations)
D_samplediff[2,1, ] <- dexp(seq(0, 100, 1), 0.04)[Age_range]
D_samplediff[2,2, ] <-dexp(seq(0, 100, 1), 0.04)[Age_range]
#Generate data
#Construct dataframe
d <- data.frame(id = 1:(2*N), soc_id = c(rep(1,N), rep(2,N)), age = NA, gender = NA, outcome = NA)
#Simulate ages from above distributions
for (pop_id in 1:2) {
d$age[d$soc_id==pop_id] <- sample(Age_range, N, replace = TRUE, prob = D_samplediff[pop_id,1,])
}
#Simulate Genders
d$gender[d$soc_id==1] <- sample(c(1,2),N, replace = TRUE, prob = c(0.3, 0.7))
d$gender[d$soc_id==2] <- sample(c(1,2),N, replace = TRUE, prob = c(0.8, 0.2))
SampleD_samplediff <- array(NA,c(2,2,length(Age_range)))
for (pop_id in 1:2) {
for (gender in 1:2) {
for (i in Age_range) {
SampleD_samplediff[pop_id, gender, i] <- length(which(d$age[d$soc_id == pop_id]==i & d$gender[d$soc_id == pop_id] == gender))
}
}
}
#Generate observations
#Effect of "culture" that's independent of demography
p_logit_culture <-c(-3, -1.5)
#Effects of age and gender
b_age <- 0.04
b_gender <- 2
for(i in 1:(2*N)) d$outcome[i] <- rbinom(1, 1, inv_logit(p_logit_culture[d$soc_id[i]] + b_age*d$age[i] + b_gender*(d$gender[i]-1)) )
#Compute expected prosociality in both populations
phi_samplediff <- c()
for (pop in 1:2) {
expect_pos = 0
total = 0
for (a in 1:2){
for (b in 1:max(Age_range)){
total = total + D_samplediff[pop,a,b];
expect_pos = expect_pos + D_samplediff[pop,a,b] * inv_logit(p_logit_culture[pop] + b_gender*(a-1) + b_age*b);
}
}
phi_samplediff[pop] = expect_pos / total
}
# Prepare lists for stan
d1_samplediff <- list(N = N,
MA = max(Age_range),
gender = d$gender[d$soc_id==1],
age = d$age[d$soc_id==1],
outcome = d$outcome[d$soc_id==1]
)
d2_samplediff <- list(N = N,
MA = max(Age_range),
gender = d$gender[d$soc_id==2],
age = d$age[d$soc_id==2],
outcome = d$outcome[d$soc_id==2]
)
#
d1_samplediff$P_same <- SampleD_samplediff[1,,]
d1_samplediff$P_other <-  D_samplediff[1,,] * 1e9
mode(d1_samplediff$P_other) <- 'integer'
d2_samplediff$P_same <- SampleD_samplediff[2,,]
d2_samplediff$P_other <-  D_samplediff[2,,] * 1e9
mode(d2_samplediff$P_other) <- 'integer'
m_samplediff1 <- stan( model_code  = MRP_GP , data=d1_samplediff ,iter = 4000, cores = 4, seed=4, chains=1, control = list(adapt_delta=0.95, max_treedepth = 13))
m_samplediff2 <- stan( model_code  = MRP_GP , data=d2_samplediff ,iter = 4000, cores = 4, seed=4, chains=1, control = list(adapt_delta=0.95, max_treedepth = 13))
s_samplediff1 <- extract.samples(m_samplediff1)
s_samplediff2 <- extract.samples(m_samplediff2)
######
####
###
##
# Plotting Code
##
###
####
####
