real<lower=0,upper=1> p01;
real<lower=0,upper=1> p01s;
}
model{
real PS10;
real p11;
real p11s;
real rr;
real rd;
PS10 = 0;
PS01 ~ beta(1,1);
p01 ~ beta(1, 1);
p01s ~ beta(1, 1);
p11 = (1-PS10)*p01 + PS01*(1-p01);
p11s = (1-PS10)*p01s + PS01*(1-p01s);
rd = p11s - p01s;
rr = p11s/p01s;
n0 ~ binomial(N0, p01);
n1 ~ binomial(N1, p11);
n0s ~ binomial(N0s, p01s);
}
"
m1 <- stan(model_code = model_one_source_monotonic, data = data, iter = 5000, cores = 1, chains = 1, control = list(adapt_delta = 0.9, max_treedepth = 13))
precis(m1)
dens(m1$p01)
sample <- extract.samples(m1)
dens(sample$PS01)
dens(sample$p01)
dens(sample$p01s)
# Transportability levaraging process information
library(rethinking)
# Vitamin A example -------------------------------------------------------
### Vitamin A data
### Aceh study
Aceh <- data.frame(N0 = 12209,
n0 = 12079,
N1 = 12991,
n1 = 12890)
### West Java study
West.Java <- data.frame(N0 = 5445,
n0 = 5195,
N1 = 5775,
n1 = 5589)
### Sarlahi Study
Sarlahi <- data.frame(N0 = 14143,
n0 = 13933,
N1 = 14487,
n1 = 14335)
### Data
data <- list(N0 = Aceh$N0,
n0 = Aceh$n0,
N1 = Aceh$N1,
n1 = Aceh$n1,
N0s = West.Java$N0,
n0s = West.Java$n0)
model_one_source_monotonic <- "
data{
int N0;
int n0;
int N1;
int n1;
int N0s;
int n0s;
}
parameters{
// real<lower=0,upper=1> PS10;
real<lower=0,upper=1> PS01;
real<lower=0,upper=1> p01;
real<lower=0,upper=1> p01s;
}
model{
real PS10;
real p11;
real p11s;
real rr;
real rd;
PS10 = 0;
PS01 ~ beta(1,1);
p01 ~ beta(1, 1);
p01s ~ beta(1, 1);
p11 = (1-PS10)*p01 + PS01*(1-p01);
p11s = (1-PS10)*p01s + PS01*(1-p01s);
rd = p11s - p01s;
rr = p11s/p01s;
n0 ~ binomial(N0, p01);
n1 ~ binomial(N1, p11);
n0s ~ binomial(N0s, p01s);
}
"
m1 <- stan(model_code = model_one_source_monotonic, data = data, iter = 50000, cores = 1, chains = 1, control = list(adapt_delta = 0.9, max_treedepth = 13))
precis(m1)
s <- extract.samples(m1)
dens(s$PS01)
dens(s$PS01, xlim = c(0,1))
dens(s$p01, xlim = c(0,1))
dens(s$p01, xlim = c(0.95,1))
dens(s$p01, xlim = c(0.99,1))
dens(s$p01, xlim = c(0.98,1))
dens(s$p01, xlim = c(0.985,0.995))
mean(s$PS01)
mean(s$p01)
dens(s$p01s, xlim = c(0.985,0.995))
dens(s$p01s, xlim = c(0,1))
dens(s$p01s, xlim = c(0.9,1))
# Transportability levaraging process information
library(rethinking)
# Vitamin A example -------------------------------------------------------
### Vitamin A data
### Aceh study
Aceh <- data.frame(N0 = 12209,
n0 = 12079,
N1 = 12991,
n1 = 12890)
### West Java study
West.Java <- data.frame(N0 = 5445,
n0 = 5195,
N1 = 5775,
n1 = 5589)
### Sarlahi Study
Sarlahi <- data.frame(N0 = 14143,
n0 = 13933,
N1 = 14487,
n1 = 14335)
### Data
data <- list(N0 = Aceh$N0,
n0 = Aceh$n0,
N1 = Aceh$N1,
n1 = Aceh$n1,
N0s = West.Java$N0,
n0s = West.Java$n0)
model_one_source_monotonic <- "
data{
int N0;
int n0;
int N1;
int n1;
int N0s;
int n0s;
}
parameters{
// real<lower=0,upper=1> PS10;
real<lower=0,upper=1> PS01;
real<lower=0,upper=1> p01;
real<lower=0,upper=1> p01s;
}
model{
real PS10;
real p11;
real p11s;
real rr;
real rd;
PS10 = 0;
PS01 ~ beta(1,1);
p01 ~ beta(1, 1);
p01s ~ beta(1, 1);
p11 = (1-PS10)*p01 + PS01*(1-p01);
p11s = (1-PS10)*p01s + PS01*(1-p01s);
rd = p11s - p01s;
rr = p11s/p01s;
n0 ~ binomial(N0, p01);
n1 ~ binomial(N1, p11);
n0s ~ binomial(N0s, p01s);
}
generated quantities{
p11s = (1-PS10)*p01s + PS01*(1-p01s);
}
"
m1 <- stan(model_code = model_one_source_monotonic, data = data, iter = 50000, cores = 1, chains = 1, control = list(adapt_delta = 0.9, max_treedepth = 13))
precis(m1)
# Transportability levaraging process information
library(rethinking)
# Vitamin A example -------------------------------------------------------
### Vitamin A data
### Aceh study
Aceh <- data.frame(N0 = 12209,
n0 = 12079,
N1 = 12991,
n1 = 12890)
### West Java study
West.Java <- data.frame(N0 = 5445,
n0 = 5195,
N1 = 5775,
n1 = 5589)
### Sarlahi Study
Sarlahi <- data.frame(N0 = 14143,
n0 = 13933,
N1 = 14487,
n1 = 14335)
### Data
data <- list(N0 = Aceh$N0,
n0 = Aceh$n0,
N1 = Aceh$N1,
n1 = Aceh$n1,
N0s = West.Java$N0,
n0s = West.Java$n0)
model_one_source_monotonic <- "
data{
int N0;
int n0;
int N1;
int n1;
int N0s;
int n0s;
}
parameters{
// real<lower=0,upper=1> PS10;
real<lower=0,upper=1> PS01;
real<lower=0,upper=1> p01;
real<lower=0,upper=1> p01s;
}
model{
real PS10;
real p11;
real p11s;
real rr;
real rd;
PS10 = 0;
PS01 ~ beta(1,1);
p01 ~ beta(1, 1);
p01s ~ beta(1, 1);
p11 = (1-PS10)*p01 + PS01*(1-p01);
p11s = (1-PS10)*p01s + PS01*(1-p01s);
rd = p11s - p01s;
rr = p11s/p01s;
n0 ~ binomial(N0, p01);
n1 ~ binomial(N1, p11);
n0s ~ binomial(N0s, p01s);
}
generated quantities{
real out;
out = (1-PS10)*p01s + PS01*(1-p01s);
}
"
m1 <- stan(model_code = model_one_source_monotonic, data = data, iter = 50000, cores = 1, chains = 1, control = list(adapt_delta = 0.9, max_treedepth = 13))
precis(m1)
# Transportability levaraging process information
library(rethinking)
# Vitamin A example -------------------------------------------------------
### Vitamin A data
### Aceh study
Aceh <- data.frame(N0 = 12209,
n0 = 12079,
N1 = 12991,
n1 = 12890)
### West Java study
West.Java <- data.frame(N0 = 5445,
n0 = 5195,
N1 = 5775,
n1 = 5589)
### Sarlahi Study
Sarlahi <- data.frame(N0 = 14143,
n0 = 13933,
N1 = 14487,
n1 = 14335)
### Data
data <- list(N0 = Aceh$N0,
n0 = Aceh$n0,
N1 = Aceh$N1,
n1 = Aceh$n1,
N0s = West.Java$N0,
n0s = West.Java$n0)
model_one_source_monotonic <- "
data{
int N0;
int n0;
int N1;
int n1;
int N0s;
int n0s;
}
parameters{
// real<lower=0,upper=1> PS10;
real<lower=0,upper=1> PS01;
real<lower=0,upper=1> p01;
real<lower=0,upper=1> p01s;
}
model{
real PS10;
real p11;
real p11s;
real rr;
real rd;
PS10 = 0;
PS01 ~ beta(1,1);
p01 ~ beta(1, 1);
p01s ~ beta(1, 1);
p11 = (1-PS10)*p01 + PS01*(1-p01);
p11s = (1-PS10)*p01s + PS01*(1-p01s);
rd = p11s - p01s;
rr = p11s/p01s;
n0 ~ binomial(N0, p01);
n1 ~ binomial(N1, p11);
n0s ~ binomial(N0s, p01s);
}
generated quantities{
real out;
out = (1-0)*p01s + PS01*(1-p01s);
}
"
m1 <- stan(model_code = model_one_source_monotonic, data = data, iter = 50000, cores = 1, chains = 1, control = list(adapt_delta = 0.9, max_treedepth = 13))
precis(m1)
library(rethinking)
data(bangladesh)
d <- bangladesh
dat_list <- list(C = d$use.contraception,did = as.integer( as.factor(d$district) ),urban = d$urban)
m1.1 <- ulam(
alist(
C ~ bernoulli( p ),
logit(p) <- a[did] + b[did]*urban,
c(a,b)[did] ~ multi_normal( c(abar,bbar) , Rho , Sigma ),
abar ~ normal(0,1),
bbar ~ normal(0,0.5),
Rho ~ lkj_corr(2),
Sigma ~ exponential(1)),
data=dat_list , chains=4 , cores=4 , cmdstan=TRUE )
library(rethinking)
data(bangladesh)
d <- bangladesh
dat_list <- list(C = d$use.contraception,did = as.integer( as.factor(d$district) ),urban = d$urban)
m1.1 <- ulam(
alist(
C ~ bernoulli( p ),
logit(p) <- a[did] + b[did]*urban,
c(a,b)[did] ~ multi_normal( c(abar,bbar) , Rho , Sigma ),
abar ~ normal(0,1),
bbar ~ normal(0,0.5),
Rho ~ lkj_corr(2),
Sigma ~ exponential(1)),
data=dat_list , chains=4 , cores=4 )
stancode(m1.1)
library(ggplot2)
library(gridExtra)
alpha= 5
n= 1000
x= rep(0,n)
y= rep(0,n)
fmin= 1
fmax= n
for (i in 2:n){
theta= runif(n-1)*2*pi
f= runif(n-1, fmax^(-alpha), fmin^(-alpha))^(-1/alpha)
x= c(0, cumsum(f*cos(theta)))
y= c(0, cumsum(f*sin(theta)))
}
ggplot(data.frame(x=x, y=y), aes(x, y))+geom_point()+geom_path()
library(ggplot2)
library(gridExtra)
alpha= 5
n= 1000
x= rep(0,n)
y= rep(0,n)
fmin= 1
fmax= n
for (i in 2:n){
theta= runif(n-1)*2*pi
f= runif(n-1, fmax^(-alpha), fmin^(-alpha))^(-1/alpha)
x= c(0, cumsum(f*cos(theta)))
y= c(0, cumsum(f*sin(theta)))
}
ggplot(data.frame(x=x, y=y), aes(x, y))+geom_point()+geom_path()
library(ggplot2)
library(gridExtra)
alpha= 5
n= 1000
x= rep(0,n)
y= rep(0,n)
fmin= 1
fmax= n
for (i in 2:n){
theta= runif(n-1)*2*pi
f= runif(n-1, fmax^(-alpha), fmin^(-alpha))^(-1/alpha)
x= c(0, cumsum(f*cos(theta)))
y= c(0, cumsum(f*sin(theta)))
}
ggplot(data.frame(x=x, y=y), aes(x, y))+geom_point()+geom_path()
library(ggplot2)
library(gridExtra)
alpha= 5
n= 1000
x= rep(0,n)
y= rep(0,n)
fmin= 1
fmax= n
for (i in 2:n){
theta= runif(n-1)*2*pi
f= runif(n-1, fmax^(-alpha), fmin^(-alpha))^(-1/alpha)
x= c(0, cumsum(f*cos(theta)))
y= c(0, cumsum(f*sin(theta)))
}
ggplot(data.frame(x=x, y=y), aes(x, y))+geom_point()+geom_path()
exp(-1)
exp(-2)
exp(-5)
exp(2)
# define parameters
prob_drink <- 0.2 # 20% of days
rate_work <- 1 # average 1 manuscript per day
# sample one year of production
N <- 365
# simulate days monks drink
set.seed(365)
drink <- rbinom( N , 1 , prob_drink )
# simulate manuscripts completed
y <- (1-drink)*rpois( N , rate_work )
# define parameters
prob_drink <- 0.2 # 20% of days
rate_work <- 1 # average 1 manuscript per day
# sample one year of production
N <- 365
# simulate days monks drink
set.seed(365)
drink <- rbinom( N , 1 , prob_drink )
# simulate manuscripts completed
y <- (1-drink)*rpois( N , rate_work )
# define parameters
prob_drink <- 0.2 # 20% of days
rate_work <- 1 # average 1 manuscript per day
# sample one year of production
N <- 365
# simulate days monks drink
set.seed(365)
drink <- rbinom( N , 1 , prob_drink )
# simulate manuscripts completed
y <- (1-drink)*rpois( N , rate_work )
m12.3 <- ulam(
alist(
y ~ dzipois( p , lambda ),
logit(p) <- ap,
log(lambda) <- al,
ap ~ dnorm( -1.5 , 1 ),
al ~ dnorm( 1 , 0.5 )
) , data=list(y=y) , chains=4 )
precis( m12.3 )
library(rethinking)
# define parameters
prob_drink <- 0.2 # 20% of days
rate_work <- 1 # average 1 manuscript per day
# sample one year of production
N <- 365
# simulate days monks drink
set.seed(365)
drink <- rbinom( N , 1 , prob_drink )
# simulate manuscripts completed
y <- (1-drink)*rpois( N , rate_work )
m12.3 <- ulam(
alist(
y ~ dzipois( p , lambda ),
logit(p) <- ap,
log(lambda) <- al,
ap ~ dnorm( -1.5 , 1 ),
al ~ dnorm( 1 , 0.5 )
) , data=list(y=y) , chains=4 )
precis( m12.3 )
stancode(m13.2)
stancode(m12.3)
# Try to do simple MRP
# If we want to compare distribution of trait, we need to account for demographic makeup
setwd("~/GitHub/Cross_Cultural_Generalizability")
data <- read.csv("House_data/Model_1a_1b_1c_data.csv")
data <- subset(data, data$fieldid == 1)
# plot
d <- list(y = data$T1_ad_choice_1yes,
ind_id = sapply(1:nrow(data), function (i) which(unique(data$SUBJECT_ID) == data$SUBJECT_ID[i])),
soc_id = data$fieldid,
age = data$AGE_in_years,
gender = data$GENDER_1female +1, # 2 female now
N = nrow(data),
P <- matrix(10, nrow = 2, ncol = 4)
)
d$age <- sapply(1:length(d$age), function (i){
if (d$age[i] <= 30) return(1)
if (d$age[i] > 30 & d$age[i] <=40 ) return(2)
if (d$age[i] > 40 & d$age[i] <=50 ) return(3)
if (d$age[i] > 50) return(4)})
library(rethinking)
MRP_stan <- "
data {
int N;
int age[N];
int gender[N];
int soc_id[N];
int y[N];
int<lower = 0> P[2, 4];
}
parameters {
real alpha;
real<lower = 0> sigma_beta;
vector<multiplier = sigma_beta>[4] beta;
real<lower = 0> sigma_gamma;
vector<multiplier = sigma_gamma>[2] gamma;
}
model {
y ~ bernoulli_logit(alpha + beta[age] + gamma[gender]);
alpha ~ normal(0, 2);
beta ~ normal(0, sigma_beta);
gamma ~ normal(0, sigma_gamma);
sigma_beta ~ exponential(1);
sigma_gamma ~ exponential(1);
}
generated quantities {
real expect_pos = 0;
int total = 0;
for (b in 1:2)
for (c in 1:4){
total += P[b, c];
expect_pos += P[b, c] * inv_logit(alpha + beta[b] + gamma[c]);
}
real<lower = 0, upper = 1> phi = expect_pos / total;
}
m <- stan( model_code  = MRP_stan , data=d ,iter = 2000, cores = 1, chains=1, control = list(adapt_delta=0.8, max_treedepth = 10))
f
5
