y= rep(0,n)
fmin= 1
fmax= n
for (i in 2:n){
theta= runif(n-1)*2*pi
f= runif(n-1, fmax^(-alpha), fmin^(-alpha))^(-1/alpha)
x= c(0, cumsum(f*cos(theta)))
y= c(0, cumsum(f*sin(theta)))
}
ggplot(data.frame(x=x, y=y), aes(x, y))+geom_point()+geom_path()
library(ggplot2)
library(gridExtra)
alpha= 5
n= 1000
x= rep(0,n)
y= rep(0,n)
fmin= 1
fmax= n
for (i in 2:n){
theta= runif(n-1)*2*pi
f= runif(n-1, fmax^(-alpha), fmin^(-alpha))^(-1/alpha)
x= c(0, cumsum(f*cos(theta)))
y= c(0, cumsum(f*sin(theta)))
}
ggplot(data.frame(x=x, y=y), aes(x, y))+geom_point()+geom_path()
exp(-1)
exp(-2)
exp(-5)
exp(2)
# define parameters
prob_drink <- 0.2 # 20% of days
rate_work <- 1 # average 1 manuscript per day
# sample one year of production
N <- 365
# simulate days monks drink
set.seed(365)
drink <- rbinom( N , 1 , prob_drink )
# simulate manuscripts completed
y <- (1-drink)*rpois( N , rate_work )
# define parameters
prob_drink <- 0.2 # 20% of days
rate_work <- 1 # average 1 manuscript per day
# sample one year of production
N <- 365
# simulate days monks drink
set.seed(365)
drink <- rbinom( N , 1 , prob_drink )
# simulate manuscripts completed
y <- (1-drink)*rpois( N , rate_work )
# define parameters
prob_drink <- 0.2 # 20% of days
rate_work <- 1 # average 1 manuscript per day
# sample one year of production
N <- 365
# simulate days monks drink
set.seed(365)
drink <- rbinom( N , 1 , prob_drink )
# simulate manuscripts completed
y <- (1-drink)*rpois( N , rate_work )
m12.3 <- ulam(
alist(
y ~ dzipois( p , lambda ),
logit(p) <- ap,
log(lambda) <- al,
ap ~ dnorm( -1.5 , 1 ),
al ~ dnorm( 1 , 0.5 )
) , data=list(y=y) , chains=4 )
precis( m12.3 )
library(rethinking)
# define parameters
prob_drink <- 0.2 # 20% of days
rate_work <- 1 # average 1 manuscript per day
# sample one year of production
N <- 365
# simulate days monks drink
set.seed(365)
drink <- rbinom( N , 1 , prob_drink )
# simulate manuscripts completed
y <- (1-drink)*rpois( N , rate_work )
m12.3 <- ulam(
alist(
y ~ dzipois( p , lambda ),
logit(p) <- ap,
log(lambda) <- al,
ap ~ dnorm( -1.5 , 1 ),
al ~ dnorm( 1 , 0.5 )
) , data=list(y=y) , chains=4 )
precis( m12.3 )
stancode(m13.2)
stancode(m12.3)
# Example 1: Demographic Standardization
# The aim here is to simulate and analyze examplary datasets generated from different processes
# a) Disparities arise only from real demographic differences among populations (e.g. one is older/more men)
# b) Disparities arise only from differences in sampling procedure
# c) Disparities arise from both processes
library(rethinking)
library(sn)
library(plotrix)
N <- 600
Age_range <- c(1:90)
####
###
##
# a) Real differences
##
###
####
#Create population array [pop, sex, age]
D <- array(NA,c(2,2,length(Age_range)))
X <- 1:100
age_seq <- seq(0, 100, 1)
#Exponential distribution (similar to many growing populations)
D[1,1, ] <- dexp(age_seq, 0.03)[Age_range]
D[1,2, ] <- dexp(age_seq, 0.03)[Age_range]
#Skewed normal distribution (similar to many shrinking populations)
D[2,1, ] <- dsn(X, xi = 10, omega = 50, alpha = 1)[Age_range]
D[2,2, ] <- dsn(X, xi = 10, omega = 50, alpha = 1)[Age_range]
# par(mfrow = c(1,2))
# plot(X, dexp(X,0.03), type = "l", xlim = c(0,100), ylab= "Density", xlab = "Age")
# plot(X, dsn(X, xi = 10, omega = 50, alpha = 1), type = "l", xlim = c(0,100), ylab= "Density", xlab = "Age")
#Generate data
d <- data.frame(id = 1:(2*N), soc_id = c(rep(1,N), rep(2,N)), age = NA, gender = NA, outcome = NA)
#Simulate ages from above distributions
for (pop_id in 1:2) {
d$age[d$soc_id==pop_id] <- sample(Age_range, N, replace = TRUE, prob = D[pop_id,1,])
}
#Simulate Genders
d$gender[d$soc_id==1] <- sample(c(1,2),N, replace = TRUE, prob = c(0.55, 0.45))
d$gender[d$soc_id==2] <- sample(c(1,2),N, replace = TRUE, prob = c(0.45, 0.55))
a1 <- matrix(0, 2, length(Age_range))
for (i in Age_range) {
a1[1,which(Age_range == i)] <- length(which(d$age[d$soc_id == 1]==i & d$gender[d$soc_id == 1] == 1))
a1[2,which(Age_range == i)] <- length(which(d$age[d$soc_id == 1]==i & d$gender[d$soc_id == 1] == 2))
}
a2 <- matrix(0, 2, length(Age_range))
for (i in Age_range) {
a2[1,which(Age_range == i)] <- length(which(d$age[d$soc_id == 2]==i & d$gender[d$soc_id == 2] == 1))
a2[2,which(Age_range == i)] <- length(which(d$age[d$soc_id == 2]==i & d$gender[d$soc_id == 2] == 2))
}
par(mfrow = c(2,2),
mar = c(1,1,1,0),
oma = c(3.3,4,0,1))
labels1 <- matrix("", length(Age_range), 2)
labels1[seq(5,75,10),1] <- seq(5,75,10)
labels2 <- matrix("", length(Age_range), 2)
par(mar=pyramid.plot(D[1,1, ]*100,D[1,2, ]*100,top.labels=c("", "Society 1",""),ppmar=c(2,1,3,1), xlim = c(3,3),labelcex=1.2, unit = "",show.values=F, labels = labels1, lxcol = "indianred", rxcol = "darkgreen",space = 0,gap = 0))
labels <- matrix("", length(Age_range), 2)
legend("topright", c("Male", "Female"), col = c("indianred", "darkgreen"),cex = 1, lty = 1,lwd = 5, bty = "n" )
mtext("Population", side = 2, outer = F, line = 2.5, cex = 1.3)
mtext("Age class", side = 2, outer = F, line = 0.2, cex = 1)
par(mar=pyramid.plot(D[2,1, ]*100,D[2,2, ]*100,top.labels=c("", "Society 2",""),ppmar=c(2,1,3,1), xlim = c(3,3),labelcex=1.2, unit = "",show.values=F, labels = labels2, lxcol = "indianred", rxcol = "darkgreen", space = 0,gap = 0))
mtext("Percentage of population per age class and gender", side = 1,line = 1.5,at = -3.5, outer = F, cex = 1)
par(mar=pyramid.plot(a1[1,],a1[2,],top.labels=c("", "",""),ppmar=c(2,1,3,1), xlim = c(15,15),labelcex=1.2, unit = "",show.values=F, labels = labels1, lxcol = "indianred", rxcol = "darkgreen",space = 0,gap = 0))
mtext("Sample", side = 2, outer = F, line = 2.5, cex = 1.3)
mtext("Age class", side = 2, outer = F, line = 0.2, cex = 1)
par(mar=pyramid.plot(a2[1,],a2[2,],top.labels=c("", "",""),ppmar=c(2,1,3,1), xlim = c(15,15),labelcex=1.2, unit = "",show.values=F, labels = labels2, lxcol = "indianred", rxcol = "darkgreen",space = 0,gap = 0))
mtext("Number of individuals per age class and gender", side = 1,line = 1.5,at = -15, outer = F, cex = 1)
b_age <- 2
b_gender <- 0
b_culture <- 0
#Generate observations
for(i in 1:(2*N)) d$outcome[i] <- rbinom(1, 1, inv_logit(b_age*standardize(d$age)[i] + b_gender*(d$gender[i]-1) + b_culture*(d$soc_id[i]-1)  ) )
d1 <- list(N = N,
MA = max(d$age[d$soc_id==1]),
gender = d$gender[d$soc_id==1],
age = d$age[d$soc_id==1],
outcome = d$outcome[d$soc_id==1]
)
d2 <- list(N = N,
MA = max(d$age[d$soc_id==2]),
gender = d$gender[d$soc_id==2],
age = d$age[d$soc_id==2],
outcome = d$outcome[d$soc_id==2]
)
d1$P_same <-a1
d1$P_other <-  round(D[1,,]*1000000)
d2$P_same <- a2
d2$P_other <- a1
{
m2a_MRP_GP_gender_same <- "
functions{
matrix GPL(int K, real C, real D, real S){
matrix[K,K] Rho;
real KR;
KR = K;
for(i in 1:(K-1)){
for(j in (i+1):K){
Rho[i,j] = C * exp(-D * ( (j-i)^2 / KR^2) );
Rho[j,i] = Rho[i,j];
}}
for (i in 1:K){
Rho[i,i] = 1;
}
return S*cholesky_decompose(Rho);
}
}
data {
int N;
int MA;
int age[N];
int outcome[N];
int gender[N];
int<lower = 0> P_same[2,MA];   // Here we enter data matrix with demographic constitution of target population
int<lower = 0> P_other[2,MA];   // Here we enter data matrix with demographic constitution of target population
}
parameters {
vector[2] alpha;
matrix[2,MA] age_effect;    //Matrix for GP age effects
real<lower=0> eta;
real<lower=0> sigma;
real<lower=0, upper=1> rho;
}
model {
vector[N] p;
alpha ~ normal(0, 1);
eta ~ exponential(2);
sigma ~ exponential(1);
rho ~ beta(10, 1);
for ( i in 1:2){
age_effect[i,] ~ multi_normal_cholesky( rep_vector(0, MA) , GPL(MA, rho, eta, sigma) );
}
for ( i in 1:N ) {
p[i] = alpha[gender[i]] + age_effect[gender[i],age[i]];
}
outcome ~ binomial_logit(1, p);
}
generated quantities{
real expect_pos = 0;
real<lower = 0, upper = 1> phi;  // This is value for p in the target population
real<lower = 0, upper = 1> psi;  // This is value for p in the source population
int total = 0;
vector[MA] pred_p_m;
vector[MA] pred_p_f;
for (a in 1:2)
for (b in 1:MA){
total += P_same[a,b];
expect_pos += P_same[a,b] * inv_logit(alpha[a] + age_effect[a,b]);
}
phi = expect_pos / total;
total = 0;
expect_pos = 0;
for (a in 1:2)
for (b in 1:MA){
total += P_other[a,b];
expect_pos += P_other[a,b] * inv_logit(alpha[a] + age_effect[a,b]);
}
psi = expect_pos / total;
pred_p_m = inv_logit(alpha[1] + age_effect[1,]');
pred_p_f = inv_logit(alpha[2] + age_effect[2,]');
}
"
}
m11 <- stan( model_code  = m2a_MRP_GP_gender_same , data=d1 ,iter = 2000, cores = 1, seed=1, chains=1, control = list(adapt_delta=0.95, max_treedepth = 13))
precis(m11)
# Example 1: Demographic Standardization
# The aim here is to simulate and analyze examplary datasets generated from different processes
# a) Disparities arise only from real demographic differences among populations (e.g. one is older/more men)
# b) Disparities arise only from differences in sampling procedure
# c) Disparities arise from both processes
library(rethinking)
library(sn)
library(plotrix)
N <- 200
Age_range <- c(1:90)
####
###
##
# a) Real differences
##
###
####
#Create population array [pop, sex, age]
D <- array(NA,c(2,2,length(Age_range)))
X <- 1:100
age_seq <- seq(0, 100, 1)
#Exponential distribution (similar to many growing populations)
D[1,1, ] <- dexp(age_seq, 0.03)[Age_range]
D[1,2, ] <- dexp(age_seq, 0.03)[Age_range]
#Skewed normal distribution (similar to many shrinking populations)
D[2,1, ] <- dsn(X, xi = 10, omega = 50, alpha = 1)[Age_range]
D[2,2, ] <- dsn(X, xi = 10, omega = 50, alpha = 1)[Age_range]
# par(mfrow = c(1,2))
# plot(X, dexp(X,0.03), type = "l", xlim = c(0,100), ylab= "Density", xlab = "Age")
# plot(X, dsn(X, xi = 10, omega = 50, alpha = 1), type = "l", xlim = c(0,100), ylab= "Density", xlab = "Age")
#Generate data
d <- data.frame(id = 1:(2*N), soc_id = c(rep(1,N), rep(2,N)), age = NA, gender = NA, outcome = NA)
#Simulate ages from above distributions
for (pop_id in 1:2) {
d$age[d$soc_id==pop_id] <- sample(Age_range, N, replace = TRUE, prob = D[pop_id,1,])
}
#Simulate Genders
d$gender[d$soc_id==1] <- sample(c(1,2),N, replace = TRUE, prob = c(0.55, 0.45))
d$gender[d$soc_id==2] <- sample(c(1,2),N, replace = TRUE, prob = c(0.45, 0.55))
a1 <- matrix(0, 2, length(Age_range))
for (i in Age_range) {
a1[1,which(Age_range == i)] <- length(which(d$age[d$soc_id == 1]==i & d$gender[d$soc_id == 1] == 1))
a1[2,which(Age_range == i)] <- length(which(d$age[d$soc_id == 1]==i & d$gender[d$soc_id == 1] == 2))
}
a2 <- matrix(0, 2, length(Age_range))
for (i in Age_range) {
a2[1,which(Age_range == i)] <- length(which(d$age[d$soc_id == 2]==i & d$gender[d$soc_id == 2] == 1))
a2[2,which(Age_range == i)] <- length(which(d$age[d$soc_id == 2]==i & d$gender[d$soc_id == 2] == 2))
}
par(mfrow = c(2,2),
mar = c(1,1,1,0),
oma = c(3.3,4,0,1))
labels1 <- matrix("", length(Age_range), 2)
labels1[seq(5,75,10),1] <- seq(5,75,10)
labels2 <- matrix("", length(Age_range), 2)
par(mar=pyramid.plot(D[1,1, ]*100,D[1,2, ]*100,top.labels=c("", "Society 1",""),ppmar=c(2,1,3,1), xlim = c(3,3),labelcex=1.2, unit = "",show.values=F, labels = labels1, lxcol = "indianred", rxcol = "darkgreen",space = 0,gap = 0))
labels <- matrix("", length(Age_range), 2)
legend("topright", c("Male", "Female"), col = c("indianred", "darkgreen"),cex = 1, lty = 1,lwd = 5, bty = "n" )
mtext("Population", side = 2, outer = F, line = 2.5, cex = 1.3)
mtext("Age class", side = 2, outer = F, line = 0.2, cex = 1)
par(mar=pyramid.plot(D[2,1, ]*100,D[2,2, ]*100,top.labels=c("", "Society 2",""),ppmar=c(2,1,3,1), xlim = c(3,3),labelcex=1.2, unit = "",show.values=F, labels = labels2, lxcol = "indianred", rxcol = "darkgreen", space = 0,gap = 0))
mtext("Percentage of population per age class and gender", side = 1,line = 1.5,at = -3.5, outer = F, cex = 1)
par(mar=pyramid.plot(a1[1,],a1[2,],top.labels=c("", "",""),ppmar=c(2,1,3,1), xlim = c(15,15),labelcex=1.2, unit = "",show.values=F, labels = labels1, lxcol = "indianred", rxcol = "darkgreen",space = 0,gap = 0))
mtext("Sample", side = 2, outer = F, line = 2.5, cex = 1.3)
mtext("Age class", side = 2, outer = F, line = 0.2, cex = 1)
par(mar=pyramid.plot(a2[1,],a2[2,],top.labels=c("", "",""),ppmar=c(2,1,3,1), xlim = c(15,15),labelcex=1.2, unit = "",show.values=F, labels = labels2, lxcol = "indianred", rxcol = "darkgreen",space = 0,gap = 0))
mtext("Number of individuals per age class and gender", side = 1,line = 1.5,at = -15, outer = F, cex = 1)
b_age <- 2
b_gender <- 0
b_culture <- 0
#Generate observations
for(i in 1:(2*N)) d$outcome[i] <- rbinom(1, 1, inv_logit(b_age*standardize(d$age)[i] + b_gender*(d$gender[i]-1) + b_culture*(d$soc_id[i]-1)  ) )
d1 <- list(N = N,
MA = max(d$age[d$soc_id==1]),
gender = d$gender[d$soc_id==1],
age = d$age[d$soc_id==1],
outcome = d$outcome[d$soc_id==1]
)
d2 <- list(N = N,
MA = max(d$age[d$soc_id==2]),
gender = d$gender[d$soc_id==2],
age = d$age[d$soc_id==2],
outcome = d$outcome[d$soc_id==2]
)
d1$P_same <-a1
d1$P_other <-  round(D[1,,]*1000000)
d2$P_same <- a2
d2$P_other <- a1
{
m2a_MRP_GP_gender_same <- "
functions{
matrix GPL(int K, real C, real D, real S){
matrix[K,K] Rho;
real KR;
KR = K;
for(i in 1:(K-1)){
for(j in (i+1):K){
Rho[i,j] = C * exp(-D * ( (j-i)^2 / KR^2) );
Rho[j,i] = Rho[i,j];
}}
for (i in 1:K){
Rho[i,i] = 1;
}
return S*cholesky_decompose(Rho);
}
}
data {
int N;
int MA;
int age[N];
int outcome[N];
int gender[N];
int<lower = 0> P_same[2,MA];   // Here we enter data matrix with demographic constitution of target population
int<lower = 0> P_other[2,MA];   // Here we enter data matrix with demographic constitution of target population
}
parameters {
vector[2] alpha;
matrix[2,MA] age_effect;    //Matrix for GP age effects
real<lower=0> eta;
real<lower=0> sigma;
real<lower=0, upper=1> rho;
}
model {
vector[N] p;
alpha ~ normal(0, 1);
eta ~ exponential(2);
sigma ~ exponential(1);
rho ~ beta(10, 1);
for ( i in 1:2){
age_effect[i,] ~ multi_normal_cholesky( rep_vector(0, MA) , GPL(MA, rho, eta, sigma) );
}
for ( i in 1:N ) {
p[i] = alpha[gender[i]] + age_effect[gender[i],age[i]];
}
outcome ~ binomial_logit(1, p);
}
generated quantities{
real expect_pos = 0;
real<lower = 0, upper = 1> phi;  // This is value for p in the target population
real<lower = 0, upper = 1> psi;  // This is value for p in the source population
int total = 0;
vector[MA] pred_p_m;
vector[MA] pred_p_f;
for (a in 1:2)
for (b in 1:MA){
total += P_same[a,b];
expect_pos += P_same[a,b] * inv_logit(alpha[a] + age_effect[a,b]);
}
phi = expect_pos / total;
total = 0;
expect_pos = 0;
for (a in 1:2)
for (b in 1:MA){
total += P_other[a,b];
expect_pos += P_other[a,b] * inv_logit(alpha[a] + age_effect[a,b]);
}
psi = expect_pos / total;
pred_p_m = inv_logit(alpha[1] + age_effect[1,]');
pred_p_f = inv_logit(alpha[2] + age_effect[2,]');
}
"
}
m11 <- stan( model_code  = m2a_MRP_GP_gender_same , data=d1 ,iter = 2000, cores = 1, seed=1, chains=1, control = list(adapt_delta=0.95, max_treedepth = 13))
precis(m11)
# House data for transport example
library(readr)
library(rethinking)
library(plotrix)
setwd("~/GitHub/Cross_Cultural_Generalizability")
data <- read.csv("House_data/Model_6a_6b_6c_6d_data.csv")
data$condition <- sapply(1:nrow(data), function(x) which(c(data$CONDITION_1_1yes[x],data$CONDITION_2_1yes[x],data$CONDITION_3_1yes[x]) == 1 ))
data <- data[,c("SUBJECT_ID","GENDER_1female","fieldid","AGE_in_years","condition","T1_choice_1yes")]
data$choice <- data$T1_choice_1yes
data$T1_choice_1yes <- NULL
data$age <- round(data$AGE_in_years)
data$gender <- data$GENDER_1female + 1
# Exclude data from "both ok"
data <- subset(data, data$condition != 3)
data_Phoenix <- data[which(data$fieldid == 3),]
data_Pune    <- data[which(data$fieldid == 4),]
Demo_Phoenix <- matrix(0, 11, 2)
Demo_Pune    <- matrix(0, 11, 2)
for (i in 4:14) {
for (g in 1:2) {
Demo_Phoenix[which(4:14 == i),g] <- length(which(data_Phoenix$age==i & data_Phoenix$gender== g))
Demo_Pune[which(4:14 == i),g]     <- length(which(data_Pune$age==i & data_Pune$gender == g))
}
}
#Prepare for stan
d_list_Phoenix <- list(N = nrow(data_Phoenix),
MA = 11,
age = data_Phoenix$age - 3,
condition = data_Phoenix$condition -1,
outcome = data_Phoenix$choice,
gender = data_Phoenix$gender,
P_empirical = t(Demo_Phoenix),
P_other = t(Demo_Pune))
d_list_Pune <- list(N = nrow(data_Pune),
MA = 11,
age = data_Pune$age - 3,
condition = data_Pune$condition -1,
outcome = data_Pune$choice,
gender = data_Pune$gender,
P_empirical = t(Demo_Pune),
P_other = t(Demo_Phoenix))
{
m <- "
functions{
matrix GPL(int K, real C, real D, real S){
matrix[K,K] Rho;
real KR;
KR = K;
for(i in 1:(K-1)){
for(j in (i+1):K){
Rho[i,j] = C * exp(-D * ( (j-i)^2 / KR^2) );
Rho[j,i] = Rho[i,j];
}}
for (i in 1:K){
Rho[i,i] = 1;
}
return S*cholesky_decompose(Rho);
}
}
data {
int N;
int MA;
int age[N];
int condition[N];
int outcome[N];
int gender[N];
int<lower = 0> P_empirical[2,MA];   // Here we enter data matrix with demographic constitution of target population
int<lower = 0> P_other[2,MA];   // Here we enter data matrix with demographic constitution of target population
}
parameters {
real alpha;
real b_prime;
vector[MA] age_effect;    //Vector for GP age effects
real<lower=0> eta;
real<lower=0> sigma;
real<lower=0, upper=1> rho;
}
model {
vector[N] p;
alpha ~ normal(0, 1);
b_prime ~ normal(0, 1);
eta ~ exponential(2);
sigma ~ exponential(1);
rho ~ beta(10, 1);
age_effect ~ multi_normal_cholesky( rep_vector(0, MA) , GPL(MA, rho, eta, sigma) );
for ( i in 1:N ) {
p[i] = alpha + (b_prime + age_effect[age[i]]) * condition[i];
}
outcome ~ binomial_logit(1, p);
}
"
library(rstan)
m_Phoenix <- stan( model_code  = m2 , data= d_list_Phoenix ,iter = 5000, cores = 1, seed=1, chains=1, control = list(adapt_delta=0.9, max_treedepth = 13))
4
